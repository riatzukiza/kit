(include "../../inc/macros")
(import-namespace kit)
(require! "path" "fs"
          {Event-emitter} "events"
          Future "../async"
          {create extend mixin curry}  "../../lib/util")

(var readdir (.lift Future.Array fs.readdir))

;;(import (cond conditional) "../fp")

(var join Path.join)

;;(const (literal scrape Dir Path types seconds minutes) (require "./deps"))

(def mix (types target)
  (mixin target types))

(macro memorize-getter (key obj value ...body)
       `(getter @key (remember)))

(macro read-alias (target alias)
       `(getter @alias  () (get this (quote @target))))
(macro promise-event (target name ...body)
       `(pipe (scoped ...@body)
              (catch (emit this "error"
                           { error e event @name }))
              (then value (emit this @name value) value)))

(macro def-evented (name args ...body)
       `(@def-type @name (...@(content-of args) event)
          (promise-event this (quote @name) ...@body)))
(macro def-curried (name args ...body)
       `(var @name (curry (lambda @args ...@body) )))

(def-curried save (obj p val) (set obj o val) )

;; An inode is an either.
;; The operations on an inode depend on whether it is a file, or a directory.
(type Inode (init (*path
                   (parent null)
                   stats
                   (event (new Event-emitter))))
      (read-alias  *path path)

      (getter name () (Path.basename this.*path))
      (getter ext () (Path.ext this.*path))

      ;;(proxy-from file string )
      ;;(proxy-from file buffer )
      ;;(proxy-from dir children)

      (setter path (target )
            (then-do (rename this.path target)
                     (assign this.*path target)))

      ;;(memo-key dir ((create Directory) this ))
      ;;(memo-key file ((create File) this ))
      )

(macro def-evented-method (type-name method-name args ...body)
       `(set @type-name
             (quote @method-name)
             (lambda @args ...@body)))
(def-evented-method  Inode stat  (path)
         (.then (stat path)
                (save this 'stats)))
(export Inode)
(var inode (create Inode))
(export inode)

