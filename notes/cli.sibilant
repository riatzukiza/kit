
(include "./macros/macros")
(import-namespace kit)
(source-mapping-url "./index.map")

(require! "chokidar" "child_process" "fs"
          {Sibilant} "./lib/sibilant"
          (literal (property Array Arr)) "./lib/async"
          {create extend mixin curry} "./lib/util.js"
          program "commander"
          R "ramda" )
(let _ R._)

(def Array.prototype.each (f)
  (.for-each this f)
  this)


(macro err-back (args emitter ...body)
`(=> (err ...@(content-of args))
     (if err (.emit @emitter "error" err)
         (do ...@body))))
;; need a script to compile entire sibilant directories to js easily.
(def make-pretty ())

(def compile-to-same-dir ())
(def get-target-name (o path)
  (Path.join (or o (Path.dirname path)) (+ (Path.basename path ".sibilant") ".js")))
(let build-with-options program)

(def singleton-array (a) [a])
(def build-all (array options)
  (.map-all-serial Arr (=> (string) (build)) array))
(type Evented (extend events.Event-emitter)
      (init (opts) (events.Event-emitter.call this opts)))
(type Source-unit
      (init (src js))
      (gmth watch (src js)
            (pipe (.watch a)
                  (on "change" ()
                      (pipe (.update b)
                            (.save))))))

(generic build (def) (path target options)
         (pipe Sibilant
               (.from-file path)
               (#-> (sib) (.transpile sib sib.string options))
               (.save-file target)))

(def recursive-transpile (path options))
(def list (val) (.split val ",") )
(pipe program
      (.usage "[options] <file ...>")
      (.option "-w --watch [watch-root]")
      (.option "-o --output [path]" [])
      (.parse process.argv))
