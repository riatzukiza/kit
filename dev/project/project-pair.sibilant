(type Project-pair)

;; in the future, this module will also keep track of state changes between the two members of the pair,
;; for instance, if we change the js file, we want to be careful about attempting to compile the lisp, in case the js
;; has been changed in a breaking manner from the lisp, as this would result in a loss of data.

;; for now, it is just a convenient mapping between the two file locations

(def-description Project-pair (pair)

  (init (mixin  Sibilant-file (first pair))
        (mixin  Javascript-file (second pair)))

  (gett js (second this.pair))
  (gett sib (first this.pair))

  (def-generic compile (sib js)
    (assign js.string (.compile sib)))

  (def-generic require ())
  (def-generic include ())
  (def-generic eval ()))
