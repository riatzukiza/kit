(macro transpile-name (name) `(get (sibilant (get (first (get @name "contents")) 'token)) 'js))

(macro transpile-and-format (form)
       `(pipe  @form
               transpile
               output-formatter
               ))
(macro def-macro (name args ...body)

       (assign name (transpile-name `(@ name)))

       (var t (transpile-and-format  `(lambda @args ...@body)))

       (set  namespace name (eval t))
       null)
(def-macro factory (args interface ...body)
  `(create-factory (lambda @args ...@body) (lit ...@interface.contents)))
;; WIP
(macro def-factory (name args interface ...body)
       `(var ))
