
(type Tree )

(describe Tree

          (value null)
          (parent null)
          (depth 0)


          (def-generic branch? (value) (= null value))
          (def-generic leaf? (value) (not (= null value)))


          (def-generic descend (seq f (tree this))
            (if (empty? seq)
                tree
                (f tree seq)))

          (def-generic find (seq (tree this))
            (if (empty? seq)
                tree
                (.*find tree seq)))

          (def-generic has (seq (tree this))
            (if (.find tree seq) true false))

          (def-generic insert (seq  (tree this) )
            (if (empty? seq)
                (do (assign tree.value undefined)
                    tree)
                (let ((node (.*insert tree seq)))
                  (assign node.depth (+ 1 tree.depth))
                  (.insert node (rest seq))
                  )))

          (def-generic set (seq value (tree this))
            (set (.insert tree  seq) 'value value))

          (def-generic add (key (tree this) (*children tree.*children))
            (or (*children.get key) ((create tree) null tree)))

          (traverse-branches? true)

          (def-generic each (f traverse-branches? leaf? *children )
            (def preorder-traverse (node k)
              (f node k)
              (.each node f))
            (if traverse-branches?
                (.each *children preorder-traverse true leaf? *children)
                (each *children (node k)
                      (if (leaf? node)
                          (f node k)
                          (.each node f false leaf *children)
                          )
                      ))))

(specify Tree-map (extend Tree))
(describe Tree-map


          (init (value parent (*children (new Map))))

          (def-generic *find (seq (tree this) (*children tree.*children) (node (*children.get (first seq))))

            (if node (.find node (rest seq)) false))

          (def-generic *insert (seq *children (tree this) (node (.add tree (first seq))))

            (*children.set (first seq) node )
            node))
;; (type Path-tree )
;; (def-description Path-tree ((*tree ((create Tree-map)))))

(macro it (string ...body)
       `(assert (scoped ...@body) @string))


