(source-mapping-url "../maps/browser.map")

(set this 'sibilant
     (scoped
      (var sibilant {} exports sibilant)
      (def error (str) (throw str))
      (def inspect (item)
           (if item.to-source (item.to-source) (item.to-string)))

      (include "../include/functional"
               "./pretty-printer"
               "./output-formatter"
               "../include/functional"
               "./parser"
               "./restructurer"
               "./precompiled-macros"
               "./docs"
               "./helpers"
               "./transpiler"
               "./docs"
               "./require-and-include")

      (var package (include "../package.son"))
      (def sibilant.package-info package)

      (def sibilant.version-string ()
           (concat package.name " browser version " package.version))

      (set sibilant 'dir 'browser)

      (def sibilant.initialize () false)
      
      (def eval-code (js)
           ((new Function js)))

      (def sibilant.include (url)
           (|> url $.get (.done (#-> sibilize eval-code))))

      (when (function? $)
            ($ (#>
                (|> "script[type=\"application/sibilant\"][src]"
                    $
                    (.map (#> this.src))
                    $.make-array
                    (map sibilant.include)))))
      sibilant))

