(var core-namespace {}
     macro-namespaces { core core-namespace })
(set sibilant
     'state { symbol-count 0
              function-comments true }
     'macros
     { 'namespaces macro-namespaces
       'default-search-path ['core]
       'search-path ['core]
       'namespace core-namespace })

(var namespace sibilant.macros.namespace
     macros sibilant.macros.namespace)

(def sibilant.macros.current-namespace ()
     (get sibilant.macros.namespaces (first sibilant.macros.search-path)))

(def sibilant.resolve-macro (macro-name)
     (if (and (includes? macro-name "/") (< 1 (length macro-name)) (not (includes? macro-name "\n")))
         (do (var path-components (macro-name.split "/")
                  macro (and (has-key? sibilant.macros.namespaces (first path-components))
                             (get sibilant.macros.namespaces (first path-components)
                                  (join (rest path-components) "/"))))
             (if macro macro
                 (error ("called namespaced macro " macro-name
                                                    " but could not find namespace " (first path-components)
                                                    ". you might need to include the file that defines it first." ))))
         (do
          (var namespace (detect sibilant.macros.search-path
                                 (#(namespace)
                                   (has-key? (get sibilant.macros.namespaces namespace)
                                             macro-name))))
          (when namespace (get sibilant.macros.namespaces namespace macro-name)))))

(def sibilant.with-default-search-path (fn)
     (var search-path-before sibilant.macros.search-path)
     (set sibilant.macros 'search-path sibilant.macros.default-search-path)
     (var return-value (fn))
     (set sibilant.macros 'search-path search-path-before)
     return-value)

(macro compile-alias-macro (from to)
       (var namespace `(get sibilant.macros.namespaces (quote @(get sibilant.macros.search-path 0))))
       `(set @namespace (quote @to) (get @namespace (quote @from))))

(macro compile-macro (name args ...body)
       `(|> (get sibilant.macros.namespaces (quote @(get sibilant.macros.search-path 0)))
            (set (quote @name)
                 (lambda @{ name name
                            body body
                            args args
                            node this }))))

(alias-macro macro macro-prior)
(alias-macro alias-macro alias-macro-prior)

(alias-macro compile-macro macro)
(alias-macro compile-alias-macro alias-macro)
(include "./macros")
(alias-macro-prior macro-prior macro)
(alias-macro-prior alias-macro-prior alias-macro)
