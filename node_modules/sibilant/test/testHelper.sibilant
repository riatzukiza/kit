(require! sibilant "../lib/sibilant.js"
          {inspect} 'util 'diff
          { red green yellow bg-green bg-red grey } 'colors)

(var passes   0
     fails    0
     fail-fast false)

(def output (...string)
     (var output-string (|> string join (concat "\n")))
     (process.stdout.write output-string)
     output-string)

(set sibilant
     'dir (quote (meta sibilant.dir)))

(output "Testing " (sibilant.version-string))

(def trim (string)
     (if string (pipe string (.to-string) (.trim))
         ""))

(def pass () (incr passes) (process.stdout.write (green ".")))

(def fail (message line)
     (incr fails)
     (process.stdout.write (concat (red "F") "\n" line ": "
                                   (or message "")
                                   "\n"))
     (when fail-fast (process.exit 0)))

(def diffprint (expected actual)
     (default actual "" expected "")

     (|> (diff.diff-chars (expected.to-string) (actual.to-string))
         (.map (#(part)
                 (var whitespace? (match-regex? part.value "^\\s+$")
                      color-fn (if (and whitespace? part.added) bg-green
                                   part.added green
                                   (and whitespace? part.removed) bg-red
                                   part.removed red
                                   grey))
                 (color-fn part.value)))
         (.join "")))


(def assert (thing message line)
     (if thing (pass) (fail message line)))

(def assert-equal (expected actual message line)
     (assert (= expected actual)
             (concat (if message (concat message "\n") "")
                     "\n  expected: " (green expected)
                     "\n   but got: " (red actual)
                     "\n  difference: " (diffprint expected actual)
                     "\n")
             line))

(def assert-match (regex thing message)
     (assert (regex.test thing)
             (concat (if message (concat message "\n\n") "")
                     "expected "
                     (inspect thing) " to match "
                     (inspect regex) " but it did not.")))

(def assert-translation (sibilant-code expected line)
     (var tokens (sibilant.restructure (sibilant.parser.parse sibilant-code))
          actual (sibilant.output-formatter (sibilant.transpile tokens)))
     (assert-equal expected actual (concat "\n  " sibilant-code "\n  " (yellow (sibilant.pretty-print tokens))) line))


(macro assert-translation (sibilant-code ...expected-js)
       `(call assert-translation @sibilant-code (concat ...@expected-js) @sibilant-code.line))

(def assert-throws (block message)
     (try (do
           (block)
           (fail (concat "expected to catch "
                         (if message (concat "`" message "'") "an error")
                         " but caught nothing")))
          (if message
              (if message.test
                  (assert-match message (e.to-string))
                  (assert-equal (trim message) (trim (e.to-string))))
              (pass))))

(def assert-translation-error (sibilant-code error-text)
     (assert-throws (#> (sibilant.sibilize (trim sibilant-code))) error-text))

(def assert-true (...args)
     (args.unshift true)
     (apply assert-equal args))

(def assert-false (...args)
     (args.unshift false)
     (apply assert-equal args))

(def assert-deep-equal (expected actual)
     (each (item index) expected
           (assert-equal item (get actual index))))

(process.next-tick (#> (output "\n\n" (+ passes fails) " total tests, "
                               (green passes 'passed) ", " (red fails 'failed))
                       (when (> fails 0) (process.exit 1))))


(macro line () ("//LINE:" this.line))
