(macro aprint (...args) `(=> (value) (print ...@args value) value))
(macro for (itt-var condition increment ...body)
       `(let (($for null))
          @["for " "(" itt-var  condition ";" increment ")" "{\n"
          `(assign $for (scoped ...@body))
          "\n}" ] $for))
(macro do-times (l ...body)
       `(for (var i 0) (< i @l) (++ i)
             ...@body))
(macro list-of (size ...body)
       `(let ((array []))
          (do-times @size
            (array.push (scoped ...@body))) array))

(def random-ratio () (Math.random))
(def random-float (min max)

  (assign min (Math.ceil min)
          max (Math.floor max))

  (Math.floor (+ (* (Math.random) (- max min)) min)))

;; Functor test
(let ((t (trie))
      (test-keys (list-of 50
                          [ (list-of 10 (random-float 0 10000))
                            (random-float 0 100) ])))

  (test-keys.push [[1 3 4 5 6 7  1 1 1 2  22 2 2 2 2 2 2 2 2  2 ] 10])

  (print "test-keys" test-keys)

  (.for-each test-keys (=> ([key value]) (t.set key value)))

  (pipe (.map t (=> (n) (+ n 100)))
        (.each (=> (node) (print (.repeat "." node.depth) node.value)))))
