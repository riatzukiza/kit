(include "./defs")
(include "./promise")
(namespace css)
(import-namespace defs)
(import-namespace promise)



(macro css-class (name ...p-pairs)
       (var css-string name.token)
       (def flatten (a)
         (a.reduce (=> (p v) (v.forEach (=> (x) (p.push x)))) []))
       (def extract-pair-string (p-name value)

         ['(write "\t") `(write @(wrap-in-quotes (get p-name 'token))) `(write ":") `(write @value) `(write ";\n")])

       (def render-property (prev pair)
         [...prev ...(extract-pair-string
           (first pair.contents)
           (second pair.contents))])

       (def create-class (pairs)
         (print "pairs" pairs)
         '(do-promise
           (write  @css-string )
           (write " {\n")
               ...@(pairs.reduce render-property [])
           (write "}\n")))
       (create-class p-pairs))

(macro style-sheet (...classes)
       (def render-class (cl)
         (print "rendering class" )
         (print "name" (first cl.contents))
         (var name (first cl.contents))
         (print "proplist" (rest cl.contents))
         (var prop-list (rest cl.contents))
         `(css-class @name ...@prop-list))
       `(do-promise ...@(classes.map render-class)))
