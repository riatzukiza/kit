(specify Kernel (extend Matrix))
(var kernel (create Kernel))

(describe Kernel

          (init (  width height (*kernel (loop (collect r [])

                                            (for-up-to x width )
                                            (.push r [])
                                            ))))
          (gett *matrix this.*kernel)
          (gett array this.*kernel)
          )

(def-generic Kernel.get (x y  width height *kernel)

  "retrieve an element of a matrix by its x and y coordinates"

  (get *kernel x y))

(def-generic Kernel.set (x y value  *kernel)
  "change the value of an array using 2d coordinates."
  (assign (get *kernel x y) value))

(def-generic Kernel.convolve (B (A this) height width)
  "perform a kernel filter convolution of two matricies '"
  (loop
     (collect m 0)

     (for-up-to x width )
     (for-up-to y height )

     (assign m (+ m (* (.get A x y) (.get B x y))))))
(def Kernel.identity (w h)
  (.dmap (kernel w h ) (-> 1)))


(export Kernel)
(export kernel)
