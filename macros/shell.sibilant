(include "./deps")
(import-namespace defs)
(import-namespace js)
(namespace shell)

(const exec (require "./exec.js"))

(def worker (p f done)
  (.then (.resolve Promise (f)) done done))
(def then-always (p f )
  (.then p
         (=> (result) (f result))
         (=> (err) (f))))
(macro always (p arg-name ...body)
       `(then-always @p (=> (@arg-name) ...@body)))

(macro shell-command (...sub-commands)
       `(exec (.join
               [...@(map sub-commands (command)
                         (if (bracket? command)
                             `(.join @command "")
                             (expression? command)
                             command
                             `(quote @command))) ] " ")))
(macro sequence (start name ...args)
       `(pipe @start
              ...@(map args (arg)
                       `(@name ...@(content-of arg)))))
(macro shell (...commands)
       `(sequence (shell-command ...@(content-of (first commands))) always
                  ...@(map (rest commands) (c) `(result (shell-command ...@ (content-of c))))))
(comment (shell
  (git branch [compile-branch])
  (git checkout [compile-branch])
  (git add "." )
  (git commit "-m" (+ "compiled " path))
  (git checkout  [branch-name])))
