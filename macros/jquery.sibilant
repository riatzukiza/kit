(import-namespace defs)
(import-namespace js)
(namespace jquery)
(macro $element (name type settings ...rest)
       [`(let @name
           (scope (context)
                  (var here ($ @type @settings))
                  (context.append here)
                  (assign context here)
                  ...@rest
                  here )) ";\n"])

(macro scope (args ...body)
       `((lambda @args ...@body) ...@(content-of @args)))

(macro div (name settings ...rest)
       `($element @name "<div>" @settings ...@rest))

(macro panel-heading (name  )
       `($element heading "<b>" {
                  text (quote @name)
                  class "bordered"
                  }))

(macro input (name type value)
       `(div @name {text (quote @name)}
            ($element input "<input>" {
                      type (quote @type)

                      width 20

                      value @value
                      } )

            (assign here input)))
(macro check-box (name value)
       `(input @name check-box @value))

(macro option (name ) `(input @name radio (quote @name)))

(macro drag (query ...body)
       `(scoped
         (let dragging? false)
         (pipe ($ @query)
               (.mousedown (=> () (assign dragging? true)))

               (.mouseup (=> () (assign dragging? false)))
               (.mousemove (=> (e)
                               (lets ( x (Math.floor (/ (- e.page-x canvas.offset-left) sim.display.cell-size)))
                                     ( y (Math.floor (/ (- e.page-y canvas.offset-top) sim.display.cell-size))))
                               (when dragging? ...@body)))

               )))
(macro mouse (query event ...body)
       `(pipe ($ @query)
             (@event
              (lambda (e)

                (lets
                 (cursor {
                         x (- e.page-x canvas.offset-left)
                         y (- e.page-y canvas.offset-top)
                         })
                 ( x (Math.floor (/ (- e.page-x canvas.offset-left) sim.display.cell-size)))
                 ( y (Math.floor (/ (- e.page-y canvas.offset-top) sim.display.cell-size))))

                ...@body)))
       )
(macro mouse-out (query ...body)
      `(mouse @query .mouseleave ...@body))
(macro mouse-in (query ...body)
       `(mouse @query .mouseenter ...@body))
(macro mouse-move (query ...body)
       `(mouse @query .mousemove ...@body))
(macro mouse-hover (query ...body)
       `(pipe ($ @query)
              (.hover
               (lambda (e)
                 (lets (cursor {
                               x (- e.page-x canvas.offset-left)
                               y (- e.page-y canvas.offset-top)
                               })
                       ( x (Math.floor (/ cursor.x sim.display.cell-size)))
                       ( y (Math.floor (/ cursor.y sim.display.cell-size))))
                 ...@body))))

(macro panel (name ...rest)
       `(div @name { class "panel" id (quote @name) }
             (panel-heading @name)
             ...@rest))

(macro int-input (name value)
       `(div @name {text (quote @name)}
             ($element input "<input>" {
                       width 20

                       value @value


                       } )
             (assign here input)))

(macro float-input (name value)

       `(div @name {text (quote @name)}

             ($element input "<input>" {

                       width 20
                       value @value
                       } )

             (assign here input)))

(macro button (name settings ...body)
       `($element @name "<button>" @settings
                  (here.text (quote @name))
                  (click here ...@body)))

(macro counter (name ...body)
       `(div @name {text (quote @name)}
             ($element counter "<span>" {} )
             (assign here counter)
             ...@body))
