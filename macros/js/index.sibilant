(include "../defs")
;; These are functions that manipulate javascript. The common theme here is that
;; most of these macros implement functionality that is a part of JS, but not a part of sibilant.
;; Or it is a part of sibilant, but not fully.
;; Some of these are entirely syntactic, and them selves don't mean much special.
;; some are macro building utilities, that allow me to more completely leverage the language of JS.
(namespace js)
(import-namespace defs)
;;(comment ////////////////////////////////////////////////////////////////////////////////////////)
(macro cons (left right ...rest)
       [left [right (cons ..rest)]])
;;get list contents
(macro mac-sym-con (sym)
       `(get @sym "contents"))
(alias-macro mac-sym-con content-of)



;;(comment Assignments/////////////////////////////////////////////////////////////////////////////)

(macro this! (name) `(set this (quote @name) @name ))

(macro assignment (type name value) [ type " " name " = " value ])

(macro assignment! (name value) [ name " = " value])
(alias-macro assignment! default)

(macro const (...rest) `(assignment const ...@rest))

(macro consts ( ...pairs)
       (as-statement
        [ "const " (pipe pairs

                         destructure

                         (.map (lambda (pair)  [(first pair) " = " (second pair)]))

                         (interleave ",\n    ")) ]))
(macro let (...rest) `(assignment let ...@rest))
;;(comment "////////////////////////////////////////////////////////////////////////////////////////")

(macro comma (...opts)
       (interleave "," opts))

(macro comma-op (...stuffs) ["( " ...(interleave "," stuffs) " )"])

(macro statement (name params ...body)
       [ name "" `(comma-op @(get params.contents)) " {\n" (indent ...body) "\n}\n" ])

;;Enclosing delimiters
(macro parenthetic (...opts) ["( " (interleave " " opts) " )"])

(macro curly (...rest) [ "{ " ...(indent ...rest) " }"])
(macro square-bracket (...rest) [ "[ " ...(indent ...rest) " ]"])

(macro block (...rest) `(curly ...@(interleave "\n" rest) ))

(macro state ( name params ...rest) [name `(parenthetic @params) `(block ...@rest)])

;;Object litterals
(macro method (name args ...body) `(state @name (comma ...@(mac-sym-con args)) (do-block ...@body)))
(alias-macro method mth)
(macro method! (name args ...body) `(state @name (comma ...@(mac-sym-con args)) ...@body))
(alias-macro method! mth!)


(macro property (name value) [name ":" value])

(macro literal (...opts) `(curly ...@(interleave ",\n" opts)))

(macro loop (head ...body)
       (if (empty? body)
           head `(...@(content-of head)
                     (loop @(first body) ...@(rest body)))))

(macro for (itt-var condition increment ...body)
       ["for " "(" itt-var ";" condition ";" increment ")" "{\n"
       ...(interleave ";\n" body)
       "}" ])
(macro collect (name value ...body)
       (print "compling collection thing")
       `(scoped (let @name @value)
                ...@body
                @name)
       )

(macro type (name ...body)
       (let type-name name)
       (log-pretty "defining type" name)
       (set namespace (output-formatter (transpile name))
            (lambda (def-type name args)
              (if (or name args)
                  (do (if args null
                          name (assign args name
                                       name def-type
                                       def-type `assign))

                      `(@def-type @name ((create @type-name) ...@(content-of args))))

                  (do (assign args def-type)
                      `((create @type-name) ...@(content-of args))))))

       `(const @name (literal (property symbol (Symbol (quote @name))) ...@body)))

(macro set-macro (name args ...body)
       `(set sibilant.macros.namespace (output-formatter (transpile @name))
             (lambda @args ...@body)))
(macro create-type (def-type type-name name args)
       `(if (or name args)
           (do (if args null
                   name (assign args name
                                name def-type
                                def-type `assign))

               `(@def-type @name ((create @type-name) ...@(content-of args))))

           (do (assign args def-type) `((create @type-name) ...@(content-of args)))))

(macro specify (name mod ...body)
       (let type-name name)
       (log-pretty "defining type" name)
       (set namespace (output-formatter (transpile name))
            (lambda (def-type name args)
              (if (or name args)
                  (do (if args null
                          name (assign args name
                                       name def-type
                                       def-type `assign))

                      `(@def-type @name ((create @type-name) ...@(content-of args))))

                  (do (assign args def-type)
                      `((create @type-name) ...@(content-of args))))))

       `(const @name (...@(content-of mod)
                         (literal (property symbol (Symbol (quote @name))) ...@body))))


;;keywords
(macro function (name args ...body) ["function " `(method! @name @args ...@body)])
(macro fn (name args ...body) `(function @name @args (do-block ...@body)))

(macro if! (cond ...body))
(macro else-if! (cond ...body))
(macro else! (...body))

(macro cond! (condition body ...rest))

(macro try! (...body)
       (let last (.pop body))
       ["try " `(block ...@body) last])
(macro catch! (...body)
       ["catch(e) " `(block ...@body)])

;;(const (literal create mixin extend) (require "common/util/funcs"))
