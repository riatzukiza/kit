(include "./defs")
(import-namespace defs)
(namespace promise)
;;(var Promise (require "bluebird"))
;;(require "../../js/lib/natives/object.js")


;;take a function that does not return a promise,
;;and return one that does.
(def p-lift (f)
  (=> ( x i a)
      (pipe (Promise.resolve x)
            (.then  (=> (x) (f x i a))))))


;;given an array of values a and a function f,
;;return a promise for an array of
;;the resolved values of f called for each x in a
(def map-promise-paralell (a f)
  (Promise.all (a.map (p-lift f))))

;;given an array of values a, a function f, and a starting value
;;return a promise for the reduction of a given f.
(def reduce-all (a f init)
  (a.reduce (=> (promise x k)
                (promise.then (=> (result)
                                  (f result x k a))))
            (Promise.resolve (or init null))))
;;(reduce-all test-arr ())

(def map-promise-serial (a f)
  (reduce-all
   a (=> (res-arr x k)
         (pipe (Promise.resolve (f x k a))
               (.then (=> (x)
                          (res-arr.push x)
                          res-arr)))) []))

;;given an array of functions, sequentially call them on a promised value
(def chain-promise (value funcs )
  ;;(print "chaining")
  (funcs.reduce (=> (result f i)
                    ;;(print "chained" result)
                    (result.then f))
                (Promise.resolve value)))
(macro do-promise ( ...statements)
       ;;(print "expanding do promise")
       `(chain-promise null [...@(statements.map
                                  (=> (s)
                                      `(=> (future) ...@s)))] ))

;;A pvar is going to be tricky.
;;how do I create an empty variable, then do some asyncronous stuff, then assign a value to that variable,
;;with out creating any closures that will prevent the variable from being accessable from with in the scope it was created in?
(comment (macro def-async (name args defs ...body)
        (print "args" ...arguments)
        (if (not (empty? defs.contents))
            (do
             (print "defs was not empty")
             (assign exp-defs
              (defs.contents.map
                  (=> (def)
                      (print "mapin def" def)
                      (if (not (empty? def.contents))
                          (do

                           (var name (first def.contents)
                                args (second def.contents)
                                other-defs (third def.contents)
                                def-body (.slice (get def 'contents) 3))

                           (print "still mapin def" name args other-defs def-body)

                            `(def-async @name @args @other-defs ...@def-body))))))
              `(var @name (# @args
                             ...@exp-defs
                             (do-promise ...@body))))
            (do
             (print "defs was empty")
             `(var @name (# @args
                            (do-promise ...@body)))))))

(curried node-promise-wrapper (func args)
         (make-promise (func ...args (# (err value) (if err (success value) (fail err))))))
