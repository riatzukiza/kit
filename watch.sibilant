(pipe "source-map-support" require .install)
(source-mapping-url "./dev.map")

(include "./macros")
(import-namespace kit)

(var testing? true)
;;(include "./header")

(var Descriptions {})
(require! R "ramda")

(require! (lit create extend mixin cond partially-apply-after ) "./js/util"

          Path 'path
          (lit transpile-sibilant) "./js/sibilant-context.js")

(include  "file-system/index.sibilant")



(include "./dev/sibilant-file"
         "./dev/javascript-file"
         "./dev/project-pair"
         "./dev/project-file-system"
         )



;;(var project ((create Project-file-system) ""))

(print project)
;; (def-curried emit (event value  emitter)  (.emit emitter ))
;; (def compile (node)
;;   (print "hi" node)
;;   (pipe project
;;         (.find node.path )
;;         (then  pair (assign pair.js.string (pair.sib.compile)))))

(var compile-on-change (fpipe  (on 'change  (node)
                                   ;;(print "node changed" node)
                                   (compile node))))


;; (var project-fs ((create File-system) "./"))

;; (var sib-fs ((create File-system) "./sib/")
;;      js-fs ((create File-system) "./js/"))

;; (print sib-fs js-fs)

;; (pipe (.watch project-fs "sib" ))



;;(on project-fs 'change (node) (print "hi" node))

(include "file-system/tests/file-system")

(var compile-on-change (-> ))

;; (pipe (.watch project.sib ".")

;;       (.then (=> (node) (compile-on-change node)))

;;       (.catch (aprint "Project watcher" "has crashed\n")))

