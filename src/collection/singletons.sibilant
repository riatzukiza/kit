(include "./macros")
(import-namespace kit)

(unless process.env.DISABLE_SOURCE_MAPS
  (.install (require "source-map-support")))

(source-mapping-url "./trie.map")
(require! (literal create extend curry mixin) "../../lib/util.js"
         R "ramda")

(macro none? (value) `(or (= @value null) (undefined? @value)))

(type Maybe (init (just value)))
(var maybe (create Maybe))


(generics (def-method Maybe)

          (just  (value) (not (none? value)))

          (lift  (f just) (=> (x) (maybe just (f x) )))

          (bind  (f value just) (if (just value) (f value) Nothing))

          (map  (f value just )
                (.bind this (.lift this f just) value just))

          (ap  (b value just) (maybe just (b.value value) ))

          (of (f just) (maybe just f )))
(macro let* (vars ...body)

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents))
                ...@body))
           `(let (@(first vars.contents))
              ...@body)))
(require! "assert")

(export Maybe)
(export maybe)

(type Either (init (left right value)))
(var either (create Either))

(export Either)
(export either)

(generics (def-method Either)

          (left  (value) (not (none? value)))
          (right (value) (none? value))

          (ap (b value left right )
              (either left right (b.value value) ))

          (map (f value left right)
               (either left right (.bind this f value left)))

          (bind (f value left)
                (if (left value)
                    (f) this))
          (bimap  (f g   value left right)
                  (if (left value) (f value)
                      (right value) (g value))))

(specify Nothing (extend Maybe) (property value null))
(var nothing (create Nothing))

(export Nothing)
(export nothing)

(generics (def-method Nothing)
          (bind () Nothing)
          (map  () Nothing))
(let* ((num (=> (n) (number? n)))
       (str (=> (s) (string? s)))
       (test (maybe num 10))
       (add (curry (=> (a b) (+ a b)))))
  (print (= Nothing (pipe test
                          (.map (add 5))
                          (.map (aprint "a number was had!"))
                          (.map (add "taco"))
                          (.map (aprint "a string thought to get in the way..."))))))
