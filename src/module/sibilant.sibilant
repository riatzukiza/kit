(include "../deps")

(import-namespace defs)
(import-namespace js)

(const (literal create extend mixin)
       (require "./util"))
(require! "chokidar")

(const (literal File) (require "./file-system"))
(const (literal Future) (require "./async"))
(const (literal Module) (require "./module"))
(const (literal Javascript) (require "./javascript"))

(const sibilant (require "sibilant"))

;; This is a really good example of a data oriented object I think.

(type Sibilant (source (*cwd (process.cwd)))

      (property *transpile sibilant)

      (proxy-from source string )
      (gett ast (*transpile source) (*transpile source.string))

      (gett js (string *cwd *transpile)
            "create a new javascript container from the transpilation of the string contained with in this sibilant container"
            (process.chdir *cwd)
            ((create Javascript )
             (pipe (.resolve Future string)
                   (.then  _transpile)
                   (then s s.js)))))


(export Sibilant)
