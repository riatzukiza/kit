(include "../file-system/index")

(import-namespace filesystem)

;;(include "./header.sibilant")

(var Descriptions {})
(require! R "ramda")


(macro dotted? (token) `(= (get @token "type") "dots"))

(require! (lit create extend mixin cond partially-apply-after ) "./js/util"
          )

(type Sibilant-file)

(def-description Sibilant-file (path fs)
  (gett file (.find this.fs this.path))

  (def-generic compile ( target path)
    (compile path target))
  (def-generic eval (path)
    (eval-string path )))

(def-description Javascript-file (path fs)
  (def-generic eval (path)))

(def compile (path target)
  (shell (sibilant [path "-o" target])))

(def promise-all-calls ( method obj (dots args))
  (.all Promise (.map args (=> (a) (.apply (get obj method) obj a)))))

(type Project )

(def-describe Project-file-system (root (fs ((create File-system) root)))
  (def-generic find (path fs)
    (promise-all-calls 'find fs
                       (Path.join "sib" (+ path ".sibilant"))
                       (Path.join "js" (+ path ".js"))))

  (def insert ())
  (def watch ())
  (def set ()))

(var project ((create Project-file-system) "."))


(pipe project
      (.find "./sibilant-context")
      (.then (aprint "found project file" )))
