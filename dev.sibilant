(include "./macros.sibilant")
(import-namespace kit)

(var testing? true)
;;(include "./header.sibilant")

(var Descriptions {})
(require! R "ramda")


(macro dotted? (token) `(= (get @token "type") "dots"))

(require! (lit create extend mixin cond partially-apply-after ) "./js/util"

          (lit File-system) "file-system"
          Path 'path
          )

(type Sibilant-file)

(def-description Sibilant-file (path fs)
  (gett file (.find this.fs this.path))

  (def-generic compile ( target path)
    (compile path target))
  (def-generic eval (path)
    (eval-string path )))

(def-description Javascript-file (path fs)
  (def-generic eval (path)))

(def compile (path target)
  (shell (sibilant [path "-o" target])))

(def promise-all-calls (obj method  (dots args))
  (.all Promise (.map args (=> (a) (.apply (get obj method) obj a)))))

(type Project-file-system )

(def promise-project-pair (m fs path)

  (promise-all-calls m fs
                     [ (Path.join "sib" (+ path ".sibilant")) ]
                     [ (Path.join "js" (+ path ".js")) ]))

(def sibilant-path (path) (Path.join "sib" (+ path ".sibilant")))
(def js-path (path) (Path.join "js" (+ path ".js")))

(type Project-pair)
(def-description Project-pair (pair)
  (gett js (second this.pair))
  (gett sib (first this.pair))

  (def-generic compile ())
  (def-generic require ())
  (def-generic include ())
  (def-generic eval ()))

(def-description Project-file-system (root (*tree ((create Tree-map))) (fs ((create File-system) root)))

  (def-generic find (path fs *tree)
    (pipe (promise-all-calls 'find  [ (sibilant-path path) ] [ (js-path path) ])
          (.then (create Project-pair))))

  (def insert ())
  (def watch ()
    (pipe fs
          (promise-all-calls
           'watch
           [ (Path.join "sib" (+ path ".sibilant")) ]
           [ (Path.join "js" (+ path ".js")) ])
          (then )))
  (def set ()))

(var project ((create Project-file-system) "."))


(pipe project
      (.find "./sibilant-context")
      (.then (aprint "found project file" )))
