(pipe "source-map-support" require .install)
(source-mapping-url "./dev.map")
(include "./macros")
(import-namespace kit)

(var testing? true)
;;(include "./header")

(var Descriptions {})
(require! R "ramda")



(require! (lit create extend mixin cond partially-apply-after ) "./js/util"

          (lit File-system File) "file-system"
          Path 'path
          (lit transpile-sibilant) "./js/sibilant-context.js"
          )



(print File File-system)
(include "./dev/sibilant-file"
         "./dev/javascript-file"
         "./dev/project-pair"
         "./dev/project-file-system"
         )



(var project ((create Project-file-system) "."))

;; (def-curried emit (event value emitter) (.emit emitter ))

(pipe (.watch project.sib ".")
      (.then  (fpipe (on 'change (node)
                         (print "node changed" node)
                         (pipe project
                               (.find node.path )
                               (then  pair (assign pair.js.string (pair.sib.compile)))))))

      (.catch (aprint "Project watcher" (process.cwd) "has crashed\n")))

