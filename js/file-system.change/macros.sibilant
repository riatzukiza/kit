
(import-namespace defs)
(import-namespace js)



;; A library I've not finished yet for working with http requests.

;;(macro has (object property (default predicate `defined?)) `(@predicate (get @object (quote @property))))

;;(comment (has key object function?))


(macro functorals (...bodys)
       (map-content body `(functorial ...@content)))

(macro recursive-functorial (name args obj value ...body)
       `(functorial @name @args (functor @obj .each (@value) ...@body)))

(macro fluent (def name args ...body)
       `(@def @name @args ...@body this))


(macro bind-list (l f)
       `(functor @l .reduce (x)))


(macro getter (name args ...body)
       ["get " `(mth @name @args ...@body)])
(macro setter (name args ...body)
       ["set " `(mth @name @args ...@body)])
(macro after (name def args ...body)
       `(generic @name @def
                 (...@(content-of args)
                     (target this)
                     (@name (=> ((dots args))
                                ((get target (quote @name))
                                 (dots args)))))
                 (@name ...arguments)
                 ...@body))
(macro gmth (name args ...body)
       `(generic @name (mth) @args ...@body))


(macro emits (name def args)
       `(after @name @def @args
               (target.emit (quote @name))))

(macro map (o arg ...body)
       `(functor @o .map @arg ...@body))
(macro each (o arg ...body)
       `(functor @o .each @arg ...@body))
(macro reduce (o arg ...body)
       `(functor @o .reduce @arg ...@body))
(macro export (name)
       `(set exports (quote @name) @name))
