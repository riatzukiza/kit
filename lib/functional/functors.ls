(include "./macros.ls")

(curried add (a b)
         (console.log "adding" a b)
         (+ a b))
(curried mapObject (a f)
         (var b (object))
         (eachKey a (lambda (v k o) (set k b v)))
         b)
(curried concatObject (a b)
         (var c (object))
         (eachKey a (lambda (v k o) (set k c v)))
         (eachKey b (lambda (v k o) (set k c v)))
         c)
(curried mergeObject (a b)
         (eachKey b (lambda (v k o) (set k a v)))
         a)
(curried extendObject (a b) (mergeObject (Object.create a) b))
(curried defineFactory (Constructor prototype)
         (set Constructor.prototype prototype)
         (function factory (value obj)
                   (new Constructor value obj))
         (set factory.prototype prototype)
         (set factory.constructor Constructor))
(curried extendFactory (Constructor factory prototype)
         (var sub (defineFactory Constructor (extendObject factory.prototype prototype)))
         (sub.super factory.constructor)
         (sub.superFactory factory)
         sub)
(curried Functor (mod mapping value)
         (set value (mod value))
         (defun functor (fn)
           (set functor.value (mapping fn functor.value)) value)
         (set functor.mod mod)
         (set functor.mapping mapping)
         (set functor.value value) functor)
(defun id (x) x)
(var Identity (Functor id))
(var Maybe (Identity
            (lambda (fn value)
              (console.log "maybe" fn value)
              (if (&& (! (undefined? value))
                      (! (null? value)) )
                  (fn value) null))))
(var ArrayMap
     (Identity (lambda (fn value)
                 (value.map fn))))
(var StringMap
     (Functor (lambda (value) (value.split ""))
              ArrayMap.mapping))
(curried Applicative (type value)
         (Functor type
                  (lambda (fn x)
                    (lambda (y) (fn x.value y)))
                  value))
(curried Monad (type value)
         (console.log "creating monad with value" value)
         (console.log "creating monad with type" type)
         (Functor type
                  (lambda (fn x)
                    (console.log "monadic value" x)
                    (x fn)) value))
(curried lift (monadicType f)
         (lambda (x)
           (console.log "lifted" f x)
           (monadicType (f x))))
(var MaybeMonad (Monad Maybe))
(var liftMaybe (MaybeMonad))
;(var maybeAdd5 (liftMaybe (add 5)))
(var add5 (add 5))
(var mMaybe5 (MaybeMonad 5))
(var mMaybe10 (mMaybe5 add5))
(console.log "monad maybe 5 + 5" mMaybe10.value)
(var mMaybe15 (mMaybe10 add5))
(console.log "monad maybe 10 + 5" mMaybe15.value)
(var mMaybe20 (mMaybe15 add5))
(console.log "monad maybe 15 + 5" mMaybe20.value)


(var AppMaybe (Applicative Maybe))
(var appMaybe6 (AppMaybe 6))
(appMaybe6 add)
(console.log "app maybe 6 + 7" (appMaybe6.value 7))
(var six (Maybe 6))
;(console.log "Maybe 6" six)
(var cAdd6 (add 6))
;(var cAdd7 (add 7))
(six cAdd6)
(console.log "maybe add 6 to 6" six.value)
;(console.log "maybe Monad add 6 to 6" six.value)


