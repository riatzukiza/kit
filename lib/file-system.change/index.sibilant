(include "./deps.sibilant"
         "./macros")
(macro join (...args)
       `(Path.join ...@args))


(import-namespace defs)

(import-namespace js)
(const Future (require "../async"))

(const readdir (.lift Future.Array fs.readdir))


(lift-from fs Future.Future
           mkdir read-file write-file
           stat unlink rmdir)

(macro error! (...message)
       `(throw (new Error (+ ...@message))))
(comment (error! "attempted to make a value that already exists"))

(const (literal Hashed-trie) (require "./../collection/hashed-trie"))


(def conditional (value pred action (dots rest))
  "A functional conditional operator. Immediately evaluates its arguements."
  (if action
      (if (pred value) (action value)

          (conditional value (dots rest)))

      pred (pred value)

      value))

(def cond (pred action (dots rest))
  "A lazy application of a functional conditional operator.
Waits for a value to be given to it before applying its functional arguements"
  (=> (value) (conditional value pred action (dots rest))))



(macro lets! (assignments ...body)
       `(do ...@((map (content-of assignments) (assignment)
                      `(let ...@(content-of assignment))))
          ...@body))


(include
 "./lang.sibilant"
 "./inode.sibilant"
 "./file.sibilant"
 "./directory.sibilant"
 "./tree.sibilant"
 )

