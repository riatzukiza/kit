(include "../deps")

(import-namespace defs)
(import-namespace js)

(const (literal create extend mixin)
       (require "./util"))
(require! "chokidar")

(const (literal File) (require "./file-system"))
(const (literal Future) (require "./async"))
(const (literal Module) (require "./module"))
(const (literal Javascript) (require "./javascript"))

(const sibilant (require "sibilant"))

(type Sibilant

      (property cwd (process.cwd))
      (property _transpile sibilant)
      (init (string cwd))
      (gmth from (container)
            "create a new sibilant container from a string wrapped in another container"
            ((create Sibilant) container.string))

      (gmth from-file (path)
            "create a new sibilant container from a newly created file container"
            (let  file ((create File) path))
            (let sib (.from Sibilant file))
            (assign sib.file file) sib)

      (gmth load ( here (sib this))
            "create a module from the transpilation of the string contained with in this container"
            (.load ((create Module) (.transpile  sib ) here)))

      (gmth transpile (string cwd _transpile)
            "create a new javascript container from the transpilation of the string contained with in this sibilant container"

            (when options.working-directory
              (proces.chdir cwd))

            ((create Javascript )
             (pipe (.resolve Future string)
                   (.then  _transpile)
                   (then s (process.chdir Sibilant.cwd)
                         s.js)))))


(export Sibilant)
