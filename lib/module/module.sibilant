(include "../deps")

(import-namespace defs)
(import-namespace js)

(const (literal create extend mixin)
       (require "./util"))

(const (literal File Directory Inode) (require "./file-system"))
(const (literal Future (property Array Arr)) (require "./async"))

(const (literal Javascript) (require "./javascript"))
(const (literal Sibilant) (require "./sibilant"))

(macro js (scope ...body)
       "A simple helper macro for creating Javascript
type objects from a sequence of strings an arrays."
       `(set @scope 'js ((create Javascript)
                         (concat-string (deep-flatten [...@body])))))


(def deep-flatten (arr)
  "Resolve an array of strings, create an array which is the
interleaving of the joins of all sub arrays recursively.
All other values are simply inserted."
  (pipe (.resolve Arr arr)
        (.bind (cond is.array
                 deep-flatten
                 (=> (x) [x])))))
(def concat-string (args)
  "Resolve an array of strings, return a promise for the concatonation of
all values contained with in the array."
  (pipe (.resolve Arr args)
        (.reduce (=> (result element)
                     (+ result element))
                 "")))

;; A module is a specialized evaluator of javascript strings.
(type Module
      (init (source here js exports var-names context ))

      (gmth compile (source  (var-names ["foo" "bar" "bazzle"]) (self this))
            "create a function from the string which was given to the module at its creation.
The string should be valid javascript"
            (js self
                "(function (exports, here,context) {\n"
                "\"use strict\";\n"
                (if (not (empty? var-names))
                    (.join ["let { " (.join var-names ",") " } = context;\n"] "")
                    "")
                source.string ";\n"
                "return exports;\n"
                "})"))

      (gmth load

            ( here js (exports {}) (context {}) (self this))
            "compile string to javascript if it is not compiled already, and apply the function returned by the module.
Also builds the scope"

            (assign context
                    (extend context
                            (literal Module Javascript Sibilant
                                     Directory File Inode Future Arr)))

            (assign this.module
                    (ap (if (not js)
                            (pipe (self.compile) (.eval))
                            (.eval js))
                        exports here context)))
      ;;(gmth call ())
      ;;(gmth apply ())
      ;;(gmth test ())
      )

(export Module)
