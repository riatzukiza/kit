(namespace interface)

(var init-form   (fpipe (get 'contents)
                        first
                        (get  'token)
                        (=  "init")))

(var not-init (fpipe init-form not ))

;;(var find-init-form (fpipe (.find  init-form) (or {contents []}) (get 'contents) rest))

(var find-init-form (fpipe (.find  init-form)
                           (or {contents []})
                           (get 'contents)
                           rest))

(def create-interface (name args body)

  (let ((init-body `(init @ args ...@(find-init-form body)))

        (lit-args (.filter body not-init)))

    `(.define Interface (quote @name) (lit @init-body ...@lit-args))))



(def macros.create-interface (name args body)

  (let ((init-body `(init @ args ...@(find-init-form body)))

        (lit-args (.filter body not-init)))

    `(.define Interface
              (quote @name)
              (lit @init-body ...@lit-args))))

(def-lit-macro def-interface (name args ...body)
  `(property @name (create-interface @name @args @body)))

(def macros.def-interface (name args ...body)
  `(loose-var @name @(.create-interface macros name args body)))
