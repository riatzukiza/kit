

(include "kit/macros")

(import-namespace kit)

(include "kit/header")

;; (include "./inc/generic"
;;          ;;"./inc/async"
;;          )
(include "./inc/misc")

;; (var curry R.curry)

;; (macro then-pipe (p ...funcs)
;;        `(pipe @p
;;               ...@(.map funcs (=> (e) `(.then @e)))))

(macro fpipe (...body) `(=> ($fpipe) (pipe $fpipe ...@body)))
 

(meta (include "./meta") null)

(var Interface {})

(describe Interface

          ( *symbols {})
          ( *types {})

          (init (name
                 *obj
                 (*types {})
                 (*symbols {})))

          (def-generic define
              (name

               *obj *types *symbols

               ( *shares (or *obj.borrows *obj.shares []))
               ( *ext (or *obj.extend {}))
               ( *build *obj.build))


            (if (in  *symbols name)

                (mixin *obj (get *types (get *symbols name)))
                (.create this name *obj)))

          (def-generic create

              (name

               *obj *types *symbols

               (*shares (or *obj.borrows *obj.shares []))
               (*ext (or *obj.extend {}))
               (*build *obj.build)
               (*symbol (Symbol name)))

            (collect m (extend  *ext (mixin  [ (lit name (symbol *symbol)) (dots *shares) ] *obj))

                     (set *symbols name *symbol)
                     (set *types  *symbol m)

                     (if *build (.build m )))))
