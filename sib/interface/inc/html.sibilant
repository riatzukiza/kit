
(require! "http"
          R "ramda"

          ;;(literal Trie trie) "../kit/src/collection/trie.sibilant"

          )


(macro resolve-then ( value ...body)
       `(pipe (Promise.resolve @value)
              (then @value ...@body)))

(def write-element-attribute (value key)
  (resolve-then value (promise-write-to-stream stream (+ key "=" "'" value "' " )))) 

(macro arrow-let (defs ...body)
       ;; clarify this, document or re-write.
       `(let (...@(.map defs.contents (=> (de)
                                          `(@(first de.contents) (=> ...@(rest de.contents)))))) ...@body))
(alias-macro arrow-let =>-let)
(alias-macro arrow-let flet)

(type Html-element

      (gett body  this.*body)
      (gett stream  ((create Promise-writer) this.*stream))
      (gett promise  this.*promise)

      (init ((name "")
             (attributes {})
             (*body [])
             *stream
             (*promise (Promise.resolve)))))

(var html-element (create Html-element))

(macro infix-assignment-string (key value)
       `(+ @key "=" "'" @value "' " ))
(def-curried render-element-attribute (value key stream)
  "given a key and a value, render the attribute string fragment"
  (promise-write-to-stream stream (+ " " (infix-assignment-string key value) )))

(def-promised promise-write-to-stream (stream data)
  (.write stream data success))

(def-curried render-child-segment (stream segment)
  (if (undefined? segment)
      (Promise.resolve)

      (array? segment)
      (pipe (Promise.all segment)
            (.then (render-children stream)))

      segment.render (.render segment stream)

      (promise-write-to-stream stream (+ "" segment))))

(def-curried render-children (stream children)
  (.reduce children (=> (promise promised-element)
                        (pipe promise
                              (then-do  promised-element)
                              (.then (render-child-segment stream))))
           (Promise.resolve)))

(def end-opening-tag      (stream)
  (-> (promise-write-to-stream stream ">\n")))

(def render-opening-tag   (stream name)
  (-> (promise-write-to-stream stream (+ "<" name))))

(def render-closing-tag   (stream name)
  (-> (promise-write-to-stream stream (+ "</" name ">\n"))))

(generic Html-element.render (def) (stream name  attributes body promise)
         "Write an html document fragment to a stream, and its content. Content
can be a string, promise, or a renderable. "
         ;; Ata this.
         (flet ((render-element-attribute (value key)
                  "given a key and a value, render the attribute string fragment associated to the given stream"
                  (resolve-then value (promise-write-to-stream stream (+ " " key "=" "'" value "' " ))))

                )

           (flet ((render-attributes ()
                    (Promise.all
                     (pipe (Object.keys attributes)
                           (map (k) (render-element-attribute (get attributes k) k)))))) 
             (then-pipe (Promise.resolve)
                        (render-opening-tag stream name)
                        render-attributes
                        (end-opening-tag stream)
                        (-> (render-children stream body))
                        (render-closing-tag stream name)))))



(macro dotted? (token) `(= (get @token "type") "dots"))

(alias-macro loop flat-pipe)

(def Array.prototype.each (f)
  (this.for-each f)
  this)



;; element functions are of the form `(f @name {@attributes} [@children])
(macro xml ( element-function root)
       `(@element-function ...@(let ((name `(quote @(first (content-of (first (content-of root))))))
                                     (elements (rest root.contents))
                                     (attributes-list [])
                                     (values []))


                                 (while (> elements.length 0)
                                   (let ((el (.shift elements)))

                                     (if (dotted? el)
                                         (do (.push attributes-list ("'" (get (first el.contents) 'token) "'"))
                                             (.push attributes-list (.shift elements)))

                                         (and (expression? el)
                                              (dotted? (first el.contents)))
                                         (.push values `(xml @element-function  @el))

                                         (.push values el))))


                                 [ name  `(hash ...@attributes-list)  `[...@values] ])))
(macro markup (root)
       `(xml (create Html-element) @root))



(macro with-markup-to-stream (stream element)
       `(pipe (markup @element)
              (.render @stream)
              (then-do
               (.end @stream))
              ))

(def render-test-document (res)

  (with-markup-to-stream res
    (.html
     (.body (.h1 "this is a website!")
            (.div  .id "main-container"
                   (.div "yes, yes it is.")

                   (.div (Date.now))

                   (.div "and that was the time."))))))
