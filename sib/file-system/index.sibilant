(require!
 (lit cond create extend mixin) "kit/js/util"

 R 'ramda

 (lit Event-emitter) 'events

 Path 'path)

(require!
 'assert
 'chokidar
 'fs)

(var testing? true)


(macro easy-on (emitter event ...body) `(on @emitter @event (@event) ...@body))

(def identity (a) a)

(def-curried set-value (v o) (assign o.value v))

(def-curried reduce-promise (f a) (.reduce a f [(Promise.resolve) ""]))

(macro chain-promise (p ...rest)
       (if (empty? rest)
           p
           `(then-do @p (chain-promise ...@rest))))

(macro let* (vars ...body)
       "introduce scoped variables via nested lexical closures"

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents)) ...@body))
           `(let (@(first vars.contents)) ...@body)))

(def-promised timeout (t)
  (set-timeout success t))

(def once-then ( event  emitter)
  (make-promise (.once emitter event success )))


(def-curried fmap (f a) (.map a f))
(var is (lit (def string (v) (string? v))))

(def is.empty? (value)
  (empty? value))

(def athrow (err-type message)
  (-> (new err-type message)))

(def get-value-of (o) (.get-value o))

(include "./macros.sibilant")

(include "./fs-node" "./file" "./directory")


(include "./tree-map"
         "./file-system"

         ;;"../tests/file-system.sibilant"
         )

(export File-system)
(export File)
