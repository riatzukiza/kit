(var Matrix {})

(describe Matrix (init (  width height  (array []))))

(def-generic Matrix.size (height width) (*  width height))

(def-generic Matrix.get-index (([i j] [0 0]) width)
  "generate an index for an element in a 1d array from 2d coordinates."
  (+ (* i width) j ))

(def-generic Matrix.convolve (B (A this) height width)

  "perform a kernel filter convolution of two matricies '"

  (loop

     (collect m 0)

     (for-up-to x width )
     (for-up-to y height )

     (assign m (+ m (* (.get A x y) (.get B x y))))))

(def-generic Matrix.get (x y  width height array get-index)
  "retrieve an element of a matrix by its x and y coordinates "

  ;; These give us a toroidial matrix.
  (assign x (mod (+ x width) width))
  (assign y (mod (+ y height) height))

  (get array (get-index  [x y] width))

  ;; get an element from a 3d matrix.
  ;; (get array (+ (* x height width) (* y width) z))

  ;; (+ (* 3 10 15) (* 3 15) 3)

  ;; (+ (* 3 10 15) 45 3)
  ;; (+ 450 45 3)
  ;; (+ 450 48 )
  ;; 498


  ;; another way (maybe) to get an element from a 3d matrix
  ;; I think this is the right way.
  ;; (get array (+ x (* height (+ y (* width z)))))
  ;; (+ 3 (* 10 (+ 3 (* 15 3))))
  ;; (+ 3 (* 10 (+ 3 45)))
  ;; (+ 3 (* 10 48))
  ;; (+ 3 480)
  ;; 483
  )
(def-generic Matrix.set (x y value width height array get-index )
  "change the value of an array using 2d coordinates."
  (assign x (mod (+ x width) width))
  (assign y (mod (+ y height) height))
  (set array (get-index  [x y] width) value))

(def-generic Matrix.add-to-cell (x y value height width array)
  "add a number to a value found with 2d coordinates"
  (var i (.get-index this [x y]))
  (set array i (+ (get array i) value)))


(def-generic Matrix.add ())

(def-generic Matrix.scalar-multiply (scalar (m this))
  (.map m (=> (v) (* v scalar))))


(def-generic Matrix.mult (value (m this))
  (if (number? value)
      (.scalar-multiply m value)
      (.dot-product m value)))

(def-generic Matrix.transit (target f (matrix this) height width)
  "Mapping operator. Performs a map over every element in a matrix, inserting the
map's results into a target matrix of the same dimensions as the originating matrix "
  (.map matrix f matrix height width target))



(def-generic Matrix.dot-product (B (A this))
  "Standard matrix multiplication, two matricies can only be multiplied
if the height of the second is equal to the width of the first."
  (loop

     (if (= A.width B.height))

     (collect m (matrix A.height B.width)
              )

     (for-up-to r A.width )
     (for-up-to c B.height (.set m r c 0))

     (for-up-to i A.height
                (.add-to-cell
                 m r c

                 (* (.get A r i)
                    (.get B i c))))))



(def-generic Matrix.each  (f width height )
  "standard itterative operator, accepts a function and applies it to every
element of the matrix"
  (var r this)
  (loop
     (for-up-to x width )
     (for-up-to y height
                (f (.get r x y) x y r))) r)


(def-generic Matrix.map (f (m this) width height (result ((create Matrix) width height )))
  "standard itterative operator, takes a produces a new Matrix from the successive
application of that function to every element of the input matrix"
  (loop
     (collect  r result)
     (.each m )
     (=> (v x y m)
         (r.set x y (or (f v x y m) 0)))))

(def-generic Matrix.dmap (f (m this) width height)
  "short for destructive map, dmap takes a function and applies it to every
element of the matrix, swapping out the value of the functions return with its input. "
  (.map m f m width height m))

(var matrix (create Matrix))

(export Matrix)
(export matrix)


(comment

 (require! 'assert)
 (let* ((m (matrix 5 5 [
                   1 2 3 4 5
                   6 7 8 9 0
                   1 2 3 4 5
                   6 7 8 9 0
                   1 2 3 4 5
                   ] ))
        (x2-y2 (.get m 2 2)))

   (.strict-equal assert x2-y2 3  (+ "it does not get!" (.get m 2 2)))


   (.set m 2 2 10)

   (assert (= (.get m 2 2) 10))
   (print "it is setted good" (.get m 2 2))))
