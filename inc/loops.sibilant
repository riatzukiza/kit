(namespace kit)
(macro for-up-to (index-name limit ...body)
       "execute a code fragment `limit` times, making available the current index via `index-name`. Typically used to itterate over lists."

       `(for! ( @index-name 0) (< @index-name @limit ) (++ @index-name)
              ...@body))






(macro every (amount time ...body) `(when (= (mod  @time @amount) 0) ...@body))

(macro do-times (n ...body)
       `(for ( i 0) (< i @n) (++ i)
             ...@body))

(macro for! (var-exp cond inc ...body)
       (var index-name (first var-exp.contents)
            index-initial (second var-exp.contents))

       ["for (" `(var @index-name @index-initial) cond ";" inc")" "\n{\n" 
                ...(interleave ";\n" body) "\n}\n"])

(macro for (var-exp cond inc ...body)
       `(scoped (var $for null)
                (for! @var-exp @cond @inc
                      (assign $for (scoped ...@body)))
                $for))
(macro of! (assigner name col)
       [ assigner " " name " of " col ])

(macro for-of! (name set ...body)
       ["for (" `(of! var @name @set) ")" "\n{\n"
                ...(interleave ";\n"body)
                "\n}\n"
                ])
(macro all-of! ( set name ...body)
       `(for-of! @name @set ...@body))
