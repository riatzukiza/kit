(namespace kit)

(macro collect (name value ...body)
       `(let (( @name @value)) ...@body @name))

(macro const (...terms)
       (as-statement [ "const " @(pipe terms
                                       (bulk-map  (=> (name value) [name "=" value]))
                                       (interleave ",\n"))]))
(macro let (args ...body)
       "introduce scoped variables via a single lexical closure"
       `((lambda (...@(.map args.contents (lambda (el) (first el.contents)))) ...@body)
         ...@(.map args.contents (lambda (el) (second el.contents)))) )
;; (macro let! (args ...body)
;;        "introduce scoped variables via a single lexical closure"
;;        (var return-expression (.pop body))
;;        ["let " `[...@(.map args.contents (lambda (el) (first el.contents)))] "=" `[ ...@(.map args.contents (lambda (el) (second el.contents))) ] ";\n"
;;                ...body
;;                `(return @return-expression)])

(macro let* (vars ...body)
       "introduce scoped variables via nested lexical closures"

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents)) ...@body))
           `(let (@(first vars.contents)) ...@body)))


