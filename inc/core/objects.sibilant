(namespace kit)
(macro define-hidden-method (obj name args ...body)
       `(Object.define-property
         @obj
         (quote @name)
         { value (lambda @args ...@body) }))
(macro native-type-extension (native ...methods)
       (.map methods
             (lambda (m)
               `(define-native-method
                    @native ...@(get m "contents")))))
(macro class (name super-class body)
       ["class "
       ...(if body (interleave " " ["extends" super-class ]) [])
       " "
       `(curly  ...@(get (or body super-class)
                         "contents"))])

(macro type (name ...body)
       (var type-name name)
       (log-pretty "defining type" name)
       (set namespace (output-formatter (transpile name))
            (lambda (def-type name args)
              (if (or name args)
                  (do (if args null
                          name (assign args name
                                       name def-type
                                       def-type `assign))

                      `(@def-type @name ((create @type-name) ...@(content-of args))))

                  (do (assign args def-type)
                      `((create @type-name) ...@(content-of args))))))

       `(const @name (literal (property symbol (Symbol (quote @name))) ...@body)))

(macro set-macro (name args ...body)
       `(set sibilant.macros.namespace (output-formatter (transpile @name))
             (lambda @args ...@body)))
(macro create-type (def-type type-name name args)
       `(if (or name args)
           (do (if args null
                   name (assign args name
                                name def-type
                                def-type `assign))

               `(@def-type @name ((create @type-name) ...@(content-of args))))

           (do (assign args def-type) `((create @type-name) ...@(content-of args)))))

(macro specify (name mod ...body)
       (var type-name name)
       (log-pretty "defining type" name)
       (set namespace (output-formatter (transpile name))
            (lambda (def-type name args)
              (if (or name args)
                  (do (if args null
                          name (assign args name
                                       name def-type
                                       def-type `assign))

                      `(@def-type @name ((create @type-name) ...@(content-of args))))

                  (do (assign args def-type)
                      `((create @type-name) ...@(content-of args))))))

       `(var @name (...@(content-of mod)
                         (literal (property symbol (Symbol (quote @name))) ...@body))))


(macro gett (name ...body)
       ["get " `(mth @name () ...@body)])

(macro sett (name val ...body)

       ["set " `(mth @name (@val) ...@body)])

(macro init (args ...body)
       `(generic init (mth)  @args
                 (set-for this ...@(content-of args))
                 ...@body
                 this))
