
(macro let* (vars ...body)
       "introduce scoped variables via nested lexical closures"

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents)) ...@body))
           `(let (@(first vars.contents)) ...@body)))

(macro collect (name value ...body)
       `(let (( @name @value)) ...@body @name))

(macro let (args ...body)
       "introduce scoped variables via a single lexical closure"
       `((lambda (...@(.map args.contents (lambda (el) (first el.contents)))) ...@body)
         ...@(.map args.contents (lambda (el) (second el.contents)))) )


(macro remember (table key ...body)
       `(if (.has @table @key)
            (.get @table @key)
            (let ((value (scoped ...@body)))
              (.set @table @key value)
              value)))
