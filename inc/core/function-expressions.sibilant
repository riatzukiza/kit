(namespace kit)
(import-namespace core)
;; Define a function that is curried with the given name and arguments
(macro curried (name args ...body) `(var @name (curry (# @args ...@body))))

(macro content-of (expr) `(get @expr "contents"))
;; ES6 style arrow function.

(macro => (args ...body)

       ["((" ...(interleave ", " args.contents) ") => {\n\t"

             (indent (apply ^do body))

             "\n})"])


(macro functor (obj method args ...body) `(@method @obj (=> @args ...@body)))

;; Define a named function that returns a promise.
(macro def-promised (name args ...body)
       `(def @name @args (make-promise ...@body)))

;; arrow thunk.
(macro assignment! (name value) [ name " = " value])
(alias-macro assignment! default)
(macro -> (...body) `(=> () ...@body))
(macro generic (name def args ...body)
       `(...@(content-of def) @name
            (...@(functor (content-of args) .map (arg)

                          (if (expression? arg)
                              `(default @(first (content-of arg)) @(second (content-of arg)))
                              (or (brace? arg)
                                  (bracket? arg))
                              `(default @arg [...@(.map arg.contents
                                                        (=> (varname)
                                                            `(get this (quote @varname))))])
                              `(default @arg (get this (quote @arg))))))
            ...@body))
