;;(namespace assignment)
(macro global (...vars)
       (pipe vars
             destructure
             (map (# (pair) [(as-statement ["global."(first pair) " = " (second pair)]) "\n" ]))))

(macro then-let (vars ...body)
       `(then (.all Future.Object
                    (p-map ...@ (map (content-of vars) ((literal contents ))
                                     `(@ (first contents) @ (second contents)))))
              (literal ...@ (map (content-of vars) ((literal contents))
                                 (first contents)))
              ...@body))
(comment (then-let ((dir (get-file "path"))
                    (request-result (web-get "google.com")))))
(macro lets (vars ...body)
       `(do ...@(map vars.contents ((literal contents))
                     `(let @ (first contents) @ (second contents )))
         ...@body))
