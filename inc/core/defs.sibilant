(namespace kit)
(import-namespace core)


;; Creates a string that starts and ends with \"
(macro wrap-in-quotes (...str) `(+ "\"" ...@str "\""))

;; I don't know if I actually use this one any where.

;; Create a function that is exported as a part of the current module.
(macro public (name args ...rest) `(var @name (set exports (quote @name) (# @args ...@rest))))


;; es6 style ... operator
(macro dots (...contents) ["..." contents])

;; don't like these
(alias-macro dots spread-op)
(alias-macro dots rest-param)

;;(macro &spread (x) ["..." x])

;;(macro &rest (x) ["..." x])

;;(macro const ( ...pairs))



;; Utility for creating promises
(macro make-promise (...body)
       `(new Promise (=> (success fail)
                         (var resolve success
                              reject fail)
                         ...@body)))

;; add one to a variable
;;(macro increment (n) `(assign @n (+ 1 @n)))
;;(alias-macro increment ++)

;; remove one from a variable
(macro decrement (n) `(assign @n (- 1 @n)))
(alias-macro increment --)

;; Define a lambda that returns a promise.
(macro promised (args ...body) `(=> @args (make-promise ...@body)))
(alias-macro promised -->)


(macro not-implemented (args ) `(# @args (throw (new Error "not implemented"))))

(macro >> (obj f ...args) `(.bind @f @obj ...@args))


(macro += (handle value) [handle " += " value])

;; Define a lambda that returns "this"
(macro fluent (args ...body) `(# @args ...@body this))

;;(var module (ternary (not module) {exports {}} module))
;;(var exports module.exports)


;; helper for itteration.
(macro for-each (item of collection ...body) `(.for-each @collection (=> @item ...body)) )


(macro do-block (...body) (indent (apply ^do body)))


(namespace kit)
;;(comment ////////////////////////////////////////////////////////////////////////////////////////)
(macro cons (left right ...rest)
       [left [right (cons ..rest)]])
;;get list contents
(macro mac-sym-con (sym)
       `(get @sym "contents"))
(alias-macro mac-sym-con content-of)



;;(comment Assignments/////////////////////////////////////////////////////////////////////////////)

(macro this! (name) `(set this (quote @name) @name ))

(macro assignment (type name value) [ type " " name " = " value ])


(macro const (...rest) `(assignment const ...@rest))

(macro consts ( ...pairs)
       (as-statement
        [ "const " (pipe pairs

                         destructure

                         (.map (lambda (pair)  [(first pair) " = " (second pair)]))

                         (interleave ",\n    ")) ]))
;;(comment "////////////////////////////////////////////////////////////////////////////////////////")

(macro comma (...opts)
       (interleave "," opts))

(macro comma-op (...stuffs) ["( " ...(interleave "," stuffs) " )"])

(macro statement (name params ...body)
       [ name "" `(comma-op @(get params.contents)) " {\n" (indent ...body) "\n}\n" ])

;;Enclosing delimiters
(macro parenthetic (...opts) ["( " (interleave " " opts) " )"])

(macro curly (...rest)
       [ "{ " ...(indent ...rest) " }"])
(macro square-bracket (...rest) [ "[ " ...(indent ...rest) " ]"])

(macro block (...rest) `(curly ...@(interleave "\n" rest) ))

(macro state ( name params ...rest) [name `(parenthetic @params) `(block ...@rest)])

;;Object litterals
(macro method (name args ...body) `(state @name (comma ...@(mac-sym-con args)) (do-block ...@body)))
(alias-macro method mth)
(macro method! (name args ...body) `(state @name (comma ...@(mac-sym-con args)) ...@body))
(alias-macro method! mth!)


(macro property (name value) [name ":" value])

(macro literal (...opts) `(curly ...@(interleave ",\n" opts)))

(macro loop (head ...body)
       (if (empty? body)
           head `(...@(content-of head)
                     (loop @(first body) ...@(rest body)))))

(macro for (itt-var condition increment ...body)
       ["for " "(" itt-var ";" condition ";" increment ")" "{\n"
       ...(interleave ";\n" body)
       "}" ])
(macro collect (name value ...body)
       (print "compling collection thing")
       `(scoped (let @name @value)
                ...@body
                @name)
       )


;;keywords
(macro fn (name args ...body) `(function @name @args (do-block ...@body)))

(macro if! (cond ...body))
(macro else-if! (cond ...body))
(macro else! (...body))

(macro cond! (condition body ...rest))

(macro try! (...body)
       (let last (.pop body))
       ["try " `(block ...@body) last])
(macro catch! (...body)
       ["catch(e) " `(block ...@body)])


;;(const (literal create mixin extend) (require "common/util/funcs"))


(macro then (obj arg ...body)
       `(functor @obj .then (@arg) ...@body))

(macro sequence (start f ...body)
       `(pipe @start
              ...@(functor body .map (term)
                           `(@f ...@(get term "contents")))))

(macro configure (configs dir ...body)

       `(functor @configs .map (c k)
                 (sequence (.get-child @dir k) then ...@body)))

(macro p-map (...body)
       `(literal
         ...@(functor body .map (prop)
                      `(property @(first prop.contents)
                                 @(second prop.contents)))))



(macro export (value)
       `(set module.exports (quote @value) @value))

(macro map-content (expressions ...body)
       `(functor @expressions .map ((literal content))
                 ...@body))
(macro functorial (def name args ...body)

       `(@def @name (callback ...@ (content-of args)) ...@body))

(macro set-for (target ...body)
       (functor body .map (arg i)
                (if (expression? arg)
                    `(set @target  (quote @(first (content-of arg)))
                          @(first (content-of arg)))
                    `(set @target (quote @arg) @arg))))



;; A library I've not finished yet for working with http requests.

;;(macro has (object property (default predicate `defined?)) `(@predicate (get @object (quote @property))))

;;(comment (has key object function?))


(macro functorals (...bodys)
       (map-content body `(functorial ...@content)))

(macro recursive-functorial (name args obj value ...body)
       `(functorial @name @args (functor @obj .each (@value) ...@body)))

(macro fluent (def name args ...body)
       `(@def @name @args ...@body this))


(macro bind-list (l f)
       `(functor @l .reduce (x)))


(macro getter (name args ...body)
       ["get " `(mth @name @args ...@body)])
(macro setter (name args ...body)
       ["set " `(mth @name @args ...@body)])
(macro after (name def args ...body)
       `(generic @name @def
                 (...@(content-of args)
                     (target this)
                     (@name (=> ((dots args))
                                ((get target (quote @name))
                                 (dots args)))))
                 (@name ...arguments)
                 ...@body))
(macro gmth (name args ...body)
       `(generic @name (mth) @args ...@body))


(macro emits (name def args)
       `(after @name @def @args
               (target.emit (quote @name))))

(macro each (o arg ...body)
       `(functor @o .each @arg ...@body))
(macro reduce (o arg ...body)
       `(functor @o .reduce @arg ...@body))
(macro export (name)
       `(set exports (quote @name) @name))

(macro map (value args ...body)
       `(functor @value .map @args ...@body))


(macro lift (future-type name source)
       `(const @name (.lift @future-type @source)))

(macro lift-from (source future-type ...body)
       `(const [...@body]
               [...@(map  body (name)
                          `(.lift @future-type (get @source (quote @name))))]))

(macro then-thunk (p ...body) `(then @p nil ...@body))
(alias-macro then-thunk #~)
(alias-macro then-thunk then-do)


(macro proxy (name property)
       `(mth @name ((dots args))
             ((get this (quote @property) (quote @name)) (dots args))))
(macro catch (p ...body)
       `(.catch @p (=> (e) ...@body)))

(macro import (thing from)
       `(const (literal ...@(content-of thing)) (require @from)))
(macro route (method path ...body)
       `(@method app @path
                 (=> (req res)
                     (lets (url (Url.parse req.url))

                           ((literal path
                                     query
                                     hash port
                                     search
                                     pathname
                                     auth
                                     slashes
                                     href
                                     protocol
                                     host) url))
                     (def-promised write (v)
                       (res.write v success)) ...@body)))
