(macro sample (matrix el-name x y w h ...body)
       `(loop

           (collect r @matrix)

           (for ( i 0) (< i @w) (++ i))
           (for ( j 0) (< j @h) (++ j)

                ( x @x)
                ( y @y)

                (var @el-name (.get @matrix  (+ i @x) (+ j @y) ))

                ...@body )))


(macro for-of! (name set ...body)
       ["for (" `(of! var @name @set) ")" "\n{\n"
                ...(interleave ";\n"body)
                "\n}\n"
                ])

(macro all-of! ( set name ...body)
       `(for-of! @name @set ...@body))

(macro do-times (n ...body)
       `(for ( i 0) (< i @n) (++ i)
             ...@body))

;; (macro for! (var-exp cond inc ...body)
;;        (var index-name (first var-exp.contents)
;;             index-initial (second var-exp.contents))

;;        ["for (" `(var @index-name @index-initial) cond ";" inc")" "\n{\n" 
;;                 ...(interleave ";\n" body) "\n}\n"])

(macro for (itt-var condition increment ...body)
       ["for " "(" itt-var ";" condition ";" increment ")" "{\n"
               ...(interleave ";\n" body)
               "}" ])

(macro for (var-exp cond inc ...body)
       `(scoped (var $for null)
                (for! @var-exp @cond @inc
                      (assign $for (scoped ...@body)))
                $for))

(macro area (space el-name center size ...body)
       `(each-in-area @space @center (=> (@el-name i j x y) ...@body) @size ))

(macro adjacent (matrix value-name center ...body)
       `(area @matrix @value-name @center 3 ...@body))


(macro for-up-to (index-name limit ...body)
       "execute a code fragment `limit` times, making available the current index via `index-name`. Typically used to itterate over lists."

       `(for! ( @index-name 0) (< @index-name @limit ) (++ @index-name)
              ...@body))
