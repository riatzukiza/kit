(namespace kit)
(macro def-curried (name args ...body)
       `(var @name (R.curry (=> @args ...@body))))

(macro fpipe (...body)
       `(=> ($fpipe)
            (pipe $fpipe ...@body)))

;; (var is (lit (def string (v) (string? v))))

;; (def is.empty? (value)
;;   (empty? value))

;; (def athrow (err-type message)
;;   (-> (new err-type message)))

;; (def get-value-of (o) (.get-value o))

(macro p-test (promise  message ...body)

       `(then-do @promise
                 (var message @message)
                 (print  message)
                 (pipe  ...@body) ))
