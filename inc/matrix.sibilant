(macro sample (matrix el-name x y w h ...body)
       `(loop

           (collect r @matrix)

           (for ( i 0) (< i @w) (++ i))
           (for ( j 0) (< j @h) (++ j)

                ( x @x)
                ( y @y)

                (var @el-name (.get @matrix  (+ i @x) (+ j @y) ))

                ...@body )))

(macro collide (ent ...body) `(if (or (not @ent) (= @ent empty) (= @ent 0))
                                  (do ...@body)))

(macro area (space el-name center size ...body)
       `(each-in-area @space @center (=> (@el-name i j x y) ...@body) @size ))

(macro adjacent (matrix value-name center ...body)
       `(area @matrix @value-name @center 3 ...@body))


(macro all-zero (w h type)
       `(.dmap ((create Matrix)  @w @h (new @type (* @w @h))) (lambda () 0) ))

(macro allns (w h n) `(.dmap  ((create Matrix)  @w @h []) (lambda () @n) ))

