(include
 "./core/predicates"
 "./core/function-expressions"
 "./core/defs"
 "./console"
 "./core/objects.sibilant"
 "./async/events"
 "./accessors.sibilant"
 "./loops.sibilant"
 "./scope.sibilant"
 )

(macro remember (table key ...body)
       `(if (.has @table @key)
            (.get @table @key)
            (let ((value (scoped ...@body)))
              (.set @table @key value)
              value)))


(macro if! (cond ...body) `(state if @cond  ...@(interleave ";\n" body)))


(macro def! (name args ...body)
       (if (includes? name.token  "." )
           `(assign @name (function method @args ...@body))
           `(var @name (function @args ...@body))))

(macro def-generic! (name args ...body)
       `(generic @name (def!) @args  ...@body))

(macro color (r g b)
       `(p-map (red @r) (green @g) (blue @b)))

(macro import (thing from) `(var (literal ...@(content-of thing)) (require @from)))

(macro member (name value)
       `(set this (quote @name) @value))

(macro def-generic (name args ...body)
       `(generic @name (def) @args ...@body))

(macro mth! (name args ...body) `(state @name (comma ...@(mac-sym-con args)) ...@body))

(macro def-var (...rest) `(assignment let ...@rest))

