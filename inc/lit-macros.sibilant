(meta

 (macro lit (...body) `(literal ...@(.map body global.lit-macros )))

 (macro transpile-and-format (form)
        `(pipe  @form
                transpile
                output-formatter))
 (macro def-lit-macro (name args ...body)

        (assign name (transpile-name `(@ name)))

        (var t (transpile-and-format  `(lambda @args ...@body)))

        (set lit-macros name (eval t))

        null)

 (def global.lit-macros (el)


   (if (expression? el)

       (do (var name (transpile-name el))

           (if (and (literal? (first el.contents))
                    (has-key? lit-macros name))

               ((get lit-macros name) (dots (rest (content-of el))))

               `(property ...@(content-of el)))) el))

 (def lit-macros.init (args ...body)
   `(init @args ...@body))

 (def lit-macros.gett (name ...body)
   `(gett @name ...@body))

 (def lit-macros.alias (name from)
   `(alias @name @from))

 (def lit-macros.sett (name value-name ...body)
   `(sett @name @value-name ...@body))) 

