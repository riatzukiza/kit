(include "./macros")
(import-namespace kit)
(require! R "ramda" )


(def either (left right value)
  (if value (left value) (right value)))

(def conditional (value pred action (dots rest))
  "A functional conditional operator. Immediately evaluates its arguements."
  (if action
      (if (pred value) (action value)

          (conditional value (dots rest)))

      pred (pred value)

      value))

(def cond (pred action (dots rest))
  "A lazy application of a functional conditional operator. Waits for a value to be given to it before applying its functional arguements"
  (=> (value) (conditional value pred action (dots rest))))

(def partially-apply-after (f (dots args))
  (lambda ((dots rest-args))
    (f (dots rest-args) (dots args))))



(generic Object.prototype.keys (def)
         ((object this))
         (Object.keys object))

(generic Object.prototype.each (def)
         (f (object this))

         (each (object.keys) (k i) (f (get object k) k object))

         object)
(generic Array.prototype.each (def) (f (array this))
         (.for-each array f)
         this)


(generic Object.prototype.merge (def)
         (subject (target this))

         (each subject (value key)
               (comment "thing")
               (set target key value)) target)
